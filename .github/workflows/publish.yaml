name: build-sign-attest

on:
  push:
    tags:        
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build-image:
    runs-on: ubuntu-20.04@8dfb3fd64aecd43450a4ce37c11f98227f69a668 # Ubuntu 20.04.4 LTS Image Version: 20220508.1
    outputs:
      image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo }}:latest@${{ steps.digest.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:

    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v3.0.2
    - uses: actions/setup-java@860f60056505705214d223b91ed7a30f173f6142 #v3.3.0
      with:
        distribution: temurin
        java-version: 11
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@fec4a42eb0c83154e5c9590748ba8337949c5701 # v2.1.5

    - name: Execute Gradle build
      run: ./gradlew build

    - name: Log in to the Container registry
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@69f6fc9d46f2f8bf0d5491e4aabe0bb8c6a4678a # v4.0.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{raw}}

    - name: Push Docker image
      id: docker-build-push
      uses: docker/build-push-action@e551b19e49efd4e98792db7592c17c09b89db8d8 # v3.0.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Get image digest
      id: digest
      # As of docker/build-push-action v2.10.0 the digest is set in imageid
      run: echo "::set-output name=digest::$(docker inspect ${{ steps.docker-build-push.outputs.imageid }} | jq -r '.[].RepoDigests[0] | split("@") | .[1]')"

      # Generates a SLSA provenance file with predicateType https://slsa.dev/provenance/v0.2 as opposed to
      # the commented-out "Generate in-toto provenance" step below which produces a provenance
      # with predicateType https://in-toto.io/Provenance/v0.1.
    - name: Generate SLSA Provenance
      id: genslsaprovenance
      uses: philips-labs/slsa-provenance-action@dddb40e199ae28d4cd2f17bad7f31545556fdd3d # v0.7.2
      with:
        command: generate
        subcommand: files
        arguments: --artifact-path build/libs/service.war --output-path provenance.json

      # This action generates a provenance predicate of the in-toto type v0.1
      # (https://github.com/in-toto/attestation/blob/v0.1.0/spec/predicates/provenance.md#schema) 
      # which is not the same schema as the SLSA provenance v0.2 spec
      # (https://slsa.dev/provenance/v0.2)
    # - name: Generate in-toto provenance
    #   id: genintotoprovenance
    #   uses: slsa-framework/github-actions-demo@9474e92bbf825d5b4b46810fc9367dfc73429a2a # v0.1
    #   with:
    #     artifact_path: build/libs/service.war
    #     output_path: provenance.json

      # The provenance file generated will already be in in-toto format
      # which cannot be used with cosign 1.8 and the `attest` command using the specified type `slsaprovenance` predicateType
      # as it expects a non-attested format, a formalized schema which can only be satisfied by the https://slsa.dev/provenance/v0.2 type.
      # To create attestation using the `slsaprovenance` type in cosign, it expects just the raw predicate so we extract that here.
    - name: Strip out predicate
      id: strippredicate
      run: jq .predicate provenance.json > provenanceclean.json && cat provenanceclean.json

    - name: Upload provenance
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
      with:
        name: provenanceclean.json
        path: provenanceclean.json

    - name: Lowecase repo name
      id: repo
      run: |
        echo "::set-output name=repo::${GITHUB_REPOSITORY,,}"

    - name: Echo outputs
      run: |
        echo "tags: ${{ steps.meta.outputs.tags }}"
        echo "digest: ${{ steps.digest.outputs.digest }}"
        echo "image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo }}:latest@${{ steps.digest.outputs.digest }}"

  scan-image:
    runs-on: ubuntu-20.04@8dfb3fd64aecd43450a4ce37c11f98227f69a668 # Ubuntu 20.04.4 LTS Image Version: 20220508.1
    needs: [build-image]
    permissions:
      contents: read
    steps:

    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@4b9b6fb4ef28b31450391a93ade098bb00de584e # v0.3.0
      with: 
        scan-type: 'image'
        image-ref: ${{ needs.build-image.outputs.image }}
        format: 'json'
        ignore-unfixed: true
        vuln-type: 'os,library'
        output: trivy-scan.json

    - name: Add scan metadata
      uses: sergeysova/jq-action@9ac92a6da6d616b4cebdddc0059e36a1ad43fab1 # v2.1.0
      with:
        cmd: cat trivy-scan.json | jq '. + {timestamp:(now|todateiso8601)}' | jq '. + {scanner:"trivy"}' > scan.json

    - name: Upload vulnerability scan report
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535 # v3.0.0
      with:
        name: scan.json
        path: scan.json
        if-no-files-found: error

  generate-sbom:
    runs-on: ubuntu-20.04@8dfb3fd64aecd43450a4ce37c11f98227f69a668 # Ubuntu 20.04.4 LTS Image Version: 20220508.1
    needs: [build-image]
    permissions:
      contents: write # previously read, which caused failures when uploading the SBOM although it was present somehow.
    steps:

    - name: Generate SBOM
      uses: anchore/sbom-action@bb716408e75840bbb01e839347cd213767269d4a # v0.11.0
      with:
        image:  ${{ needs.build-image.outputs.image }}
        artifact-name: sbom.json
        format: cyclonedx-json

  sign-image-attestations:
    runs-on: ubuntu-20.04@8dfb3fd64aecd43450a4ce37c11f98227f69a668 # Ubuntu 20.04.4 LTS Image Version: 20220508.1
    needs: [build-image, scan-image, generate-sbom]
    permissions:
      contents: read
      packages: write
      id-token: write   # This is the key for OIDC!
    steps:

    - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
      with:
        name: sbom.json

    - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
      with:
        name: scan.json

    - uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741 # v3.0.0
      with:
        name: provenanceclean.json

    - name: Install Cosign
      uses: sigstore/cosign-installer@536b37ec5d5b543420bdfd9b744c5965bd4d8730 # v2.3.0
      with:
        cosign-release: 'v1.8.0'

    - name: Log in to the Container registry
      uses: docker/login-action@49ed152c8eca782a232dede0303416e8f356c37b # v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # TODO SIGN WITH DIGEST

    - name: Sign image
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |          
        cosign sign --force \
        -a "repo=${{ github.repository }}" \
        -a "workflow=${{ github.workflow }}" \
        -a "ref=${{ github.sha }}" \
         ${{ needs.build-image.outputs.image }}

      # There is no formal or agreed-upon predicateType yet for CycloneDX BOM predicates
      # but current suggestion "https://cyclonedx.org/bom". See https://github.com/CycloneDX/specification/issues/132.
    - name : Attest SBOM
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign attest --force --predicate sbom.json --type https://cyclonedx.org/bom   ${{ needs.build-image.outputs.image }}

    - name : Attest Vulnerability Scan
      env:
        COSIGN_EXPERIMENTAL: "true"    
      run: cosign attest --force --predicate scan.json --type https://trivy.aquasec.com/scan/v2   ${{ needs.build-image.outputs.image }}
      
      # With this step, cosign will create an attestation using the "cleaned" provenance file from earlier
      # but with the container image as the subject and not the .war file from which it was originally generated.
    - name : Attest Provenance
      env:
        COSIGN_EXPERIMENTAL: "true"    
      run: cosign attest --force --predicate provenanceclean.json --type slsaprovenance  ${{ needs.build-image.outputs.image }} # previously --type https://example.com/provenance/v1
