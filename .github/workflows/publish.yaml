name: build-sign-attest

on:
  push:
    tags:        
      - v*

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:

  build-image:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo }}:latest@${{ steps.digest.outputs.digest }}
    permissions:
      contents: read
      packages: write
    steps:

    - uses: actions/checkout@v3.0.2
    - uses: actions/setup-java@v3.3.0 # v2 worked
      with:
        distribution: temurin
        java-version: 11
    
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2.1.5 #v2 worked

    - name: Execute Gradle build
      run: ./gradlew build

    - name: Log in to the Container registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4.0.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=semver,pattern={{raw}}

    - name: Push Docker image
      id: docker-build-push
      uses: docker/build-push-action@v3.0.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Get image digest
      id: digest
      # As of docker/build-push-action v2.10.0 the digest is set in imageid
      run: echo "::set-output name=digest::$(docker inspect ${{ steps.docker-build-push.outputs.imageid }} | jq -r '.[].RepoDigests[0] | split("@") | .[1]')"

    - name: Generate provenance
      uses: slsa-framework/github-actions-demo@v0.1
      with:
        artifact_path: build/libs/service.war
        output_path: provenance.json

    - name: Upload provenance
      uses: actions/upload-artifact@v3.0.0
      with:
        name: provenance.json
        path: provenance.json

    - name: Lowecase repo name
      id: repo
      run: |
        echo "::set-output name=repo::${GITHUB_REPOSITORY,,}"

    - name: Echo outputs
      run: |
        echo "tags: ${{ steps.meta.outputs.tags }}"
        echo "digest: ${{ steps.digest.outputs.digest }}"
        echo "image: ${{ env.REGISTRY }}/${{ steps.repo.outputs.repo }}:latest@${{ steps.digest.outputs.digest }}"

  scan-image:
    runs-on: ubuntu-latest
    needs: [build-image]
    permissions:
      contents: read
    steps:

    - name: Scan for vulnerabilities
      uses: aquasecurity/trivy-action@0.3.0
      with: 
        scan-type: 'image'
        image-ref: ${{ needs.build-image.outputs.image }}
        format: 'json'
        ignore-unfixed: true
        vuln-type: 'os,library'
        output: trivy-scan.json

    - name: Add scan metadata
      uses: sergeysova/jq-action@v2
      with:
        cmd: cat trivy-scan.json | jq '. + {timestamp:(now|todateiso8601)}' | jq '. + {scanner:"trivy"}' > scan.json

    - name: Upload vulnerability scan report
      uses: actions/upload-artifact@v3.0.0
      with:
        name: scan.json
        path: scan.json
        if-no-files-found: error

  generate-sbom:
    runs-on: ubuntu-latest
    needs: [build-image]
    permissions:
      contents: write # previously read, which caused failures when uploading the SBOM although it was present somehow.
    steps:

    - name: Generate SBOM
      uses: anchore/sbom-action@v0.11.0
      with:
        image:  ${{ needs.build-image.outputs.image }}
        artifact-name: sbom.json
        format: cyclonedx-json

  sign-image-attestations:
    runs-on: ubuntu-latest
    needs: [build-image, scan-image, generate-sbom]
    permissions:
      contents: read
      packages: write
      id-token: write   # This is the key for OIDC!
    steps:

    - uses: actions/download-artifact@v3.0.0
      with:
        name: sbom.json

    - uses: actions/download-artifact@v3.0.0
      with:
        name: scan.json

    - uses: actions/download-artifact@v3.0.0
      with:
        name: provenance.json

    - name: Install Cosign
      uses: sigstore/cosign-installer@v2.3.0
      with:
        cosign-release: 'v1.8.0'

    - name: Log in to the Container registry
      uses: docker/login-action@v2.0.0
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # TODO SIGN WITH DIGEST

    - name: Sign image
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: |          
        cosign sign --force \
        -a "repo=${{ github.repository }}" \
        -a "workflow=${{ github.workflow }}" \
        -a "ref=${{ github.sha }}" \
         ${{ needs.build-image.outputs.image }}

    - name : Attest SBOM
      env:
        COSIGN_EXPERIMENTAL: "true"
      run: cosign attest --force --predicate sbom.json --type https://cyclonedx.org/BOM/v1   ${{ needs.build-image.outputs.image }}

    - name : Attest Vulnerability Scan
      env:
        COSIGN_EXPERIMENTAL: "true"    
      run: cosign attest --force --predicate scan.json --type https://trivy.aquasec.com/scan/v2   ${{ needs.build-image.outputs.image }}

    - name : Attest Provenance
      env:
        COSIGN_EXPERIMENTAL: "true"    
      run: cosign attest --force --predicate provenance.json --type https://example.com/provenance/v1  ${{ needs.build-image.outputs.image }}

